{"version":3,"sources":["webpack:///./src/global-styles/typography.scss","webpack:///./node_modules/@angular/material/_theming.scss","webpack:///$stdin","webpack:///./src/global-styles/input-components.scss","webpack:///./src/styles.scss","webpack:///./src/global-styles/colors.scss","webpack:///./src/global-styles/responsive.scss","webpack:///./src/global-styles/structures.scss","webpack:///./src/global-styles/effects.scss","webpack:///./src/global-styles/mixins.scss"],"names":[],"mappings":"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CACE,sBAQA,+EANA,4FAMA,0FANA,kHAEE,2BAQF,6DACE,2BACA,sBAGF,+EACE,sBAIJ,+IACE,cAGF,6IACE,cAGF,yIACE,cAoBF,uDACE,sBAGF,qGACE,sBA2BF,yDACE,sBAEA,uEACE,cAOJ,4WAIE,mBAGF,kNAEE,mBAGF,sMAEE,mBAIA,mIACE,mBAisGF,mDA3yIF,iCCwnB8C,CDxnB9C,uBCwnBmF,CDxnBnF,wBA2yIE,mDA3yIF,wCC0nB+C,CD1nB/C,2BC0nBoF,CD1nBpF,4BA2yIE,mDA3yIF,wCC4nB+C,CD5nB/C,2BC4nBoF,CD5nBpF,4BA2yIE,mDA3yIF,wCC8nB+C,CD9nB/C,2BC8nBoF,CD9nBpF,4BA2yIE,mDA3yIF,wCCgoB+C,CDhoB/C,2BCgoBoF,CDhoBpF,6BA2yIE,mDA3yIF,wCCkoB+C,CDloB/C,2BCkoBoF,CDloBpF,6BA2yIE,mDA3yIF,wCCooB+C,CDpoB/C,4BCooBqF,CDpoBrF,6BA2yIE,mDA3yIF,wCCsoB+C,CDtoB/C,8BCsoBqF,CDtoBrF,+BA2yIE,mDA3yIF,wCCwoB+C,CDxoB/C,8BCwoBqF,CDxoBrF,+BA2yIE,mDA3yIF,wCC0oB+C,CD1oB/C,8BC0oBqF,CD1oBrF,+BA2yIE,qDA3yIF,wCC4oB+C,CD5oB/C,+BC4oBsF,CD5oBtF,+BA2yIE,qDA3yIF,wCC8oB+C,CD9oB/C,+BC8oBsF,CD9oBtF,+BA2yIE,qDA3yIF,wCCgpB+C,CDhpB/C,+BCgpBsF,CDhpBtF,+BA2yIE,qDA3yIF,wCCkpB+C,CDlpB/C,+BCkpBsF,CDlpBtF,+BA2yIE,qDA3yIF,wCCopB+C,CDppB/C,+BCopBsF,CDppBtF,+BA2yIE,qDA3yIF,wCCspB+C,CDtpB/C,+BCspBsF,CDtpBtF,+BA2yIE,qDA3yIF,yCCwpBgD,CDxpBhD,+BCwpBuF,CDxpBvF,+BA2yIE,qDA3yIF,yCC0pBgD,CD1pBhD,+BC0pBuF,CD1pBvF,+BA2yIE,qDA3yIF,yCC4pBgD,CD5pBhD,+BC4pBuF,CD5pBvF,+BA2yIE,qDA3yIF,yCC8pBgD,CD9pBhD,+BC8pBuF,CD9pBvF,+BA2y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","file":"styles.3050b44347c80d551cca.css","sourcesContent":["@import '~@angular/material/theming';\n\n/*\n*\n* Typography\n* Design Spec: https://material.io/design/typography/the-type-system.html#type-scale\n* Angular Material 2 Customization: https://material.angular.io/guide/typography\n*\n*/\n\n/* Roboto font family: https://fonts.google.com/?query=roboto\nRoboto\nRoboto+Condensed\nRoboto+Slab\nRoboto+Mono\n\nLevel\n100 thin\n200\n300 light* used by MD\n400 regular* used by MD\n500 medium* used by MD\n600\n700 bold\n800\n900 black\n*/\n\n/* Unit\n*  0.5rem = 8px, with root font size 16px (most common)\n*  0.25rem = 4px\n*\n*/\n\n@import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500');\n// @import url('//fonts.googleapis.com/css?family=Roboto+Slab:300,400,500');\n// @import url('https://fonts.googleapis.com/css?family=Roboto+Condensed:300,400,500');\n@import url('https://fonts.googleapis.com/css?family=Lora:400,700');\n\n\n\n/* Setting typography usage:\nmat-typography-level(\n    $font-size, \n    $line-height: $font-size, (The smaller, the smaller line height. Line-height must be unit-less fraction of the font-size.)\n    $font-weight: 400, \n    $font-family: null, \n    $letter-spacing: null,\n),\ndefaults: https://github.com/angular/material2/blob/master/src/lib/core/typography/_typography.scss\n*/\n\n$custom-typography: mat-typography-config(\n    $font-family: 'Roboto, monospace',\n\n    $display-1:     mat-typography-level(6rem,     6rem,     300, null, -3.5px),\n    $display-2:     mat-typography-level(3.75rem,  3.75rem,  400, null, -0.5px),\n    $display-3:     mat-typography-level(3rem,     3.125rem, 400, null, 0     ),\n    $display-4:     mat-typography-level(2.125rem, 2.5rem,   500, null, 0.25px),\n    $headline:      mat-typography-level(1.5rem,   2rem,     400, null, 0     ),\n    $title:         mat-typography-level(1.25rem,  2rem,     500, null, 0.15px),\n\n    $subheading-1:  mat-typography-level(1.2rem,   1.5rem,   400, null, 0.15px),\n    $subheading-2:  mat-typography-level(14px,     24px,     500, null, 0.1px ), /* deprecated */\n\n    $body-1:        mat-typography-level(1.1rem,   1.5rem,   400, null, 0.5px ),\n    $body-2:        mat-typography-level(16px,     20px,     400, null, 0.25px),\n    $caption:       mat-typography-level(14px,     20px,     400, null, 0.6px ),\n    \n    $button:        mat-typography-level(14px,     140px,     500, null, 0.75px), /* can only configure font-size, family and weight. Others are no effect: https://github.com/angular/material2/blob/master/src/lib/button/_button-theme.scss */\n    $input:         mat-typography-level(inherit,  1.125,    400, null, 0     )\n);\n\n// Override typography for all Angular Material, including mat-base-typography and all components  CSS classes (e.g., mat-h1, mat-display-1, mat-typography, etc.).\n@include angular-material-typography($custom-typography);\n\n$mat-headlines: mat-display-1, mat-display-2, mat-display-3, mat-display-4,\nmat-headline, mat-title, mat-subheading-1, mat-subheading-2,\nmat-caption, mat-overline ;\n\n@each $class-selector in $mat-headlines {\n    .#{$class-selector} {\n        display: block;\n        word-break: break-word;\n    }\n}\n\n.mat-display-1, {\n    margin: 64px 0 0;\n}\n.mat-display-2, {\n    margin: 60px 0 0;\n}\n.mat-display-3, {\n    margin: 35px 0 0;\n}\n.mat-display-4, {\n    margin: 25px 0 0;\n}\n\n.mat-headline, {\n    margin: 18px 0 0;\n}\n.mat-title, {\n    margin: 16px 0 0;\n}\n\n.mat-subheading-1, {\n    margin: 14px 0 0;\n}\n.mat-subheading-2, {\n    margin: 12px 0 0;\n}\n\n.mat-body-1, {\n    margin: 0.25rem 0 0;\n}\n.mat-body-2, {\n    margin: 0.5rem 0 0;\n}\n\n// for image label & descroption for media\n.mat-caption, {\n    margin: 0.5rem 0 0;\n}\n\n// for meta descriptive text for a headline\n.mat-overline {\n    text-transform: uppercase;\n    font-size: 10px;\n    line-height: 18px;\n    font-weight: 400;\n    font-family: Roboto;\n    letter-spacing: 1.5px;\n    margin: 8px 0 0 ;\n    \n    // Overline should belong to and be at top of a title or headline; and should be close to it.\n    & + * {\n        margin-top: 0.25rem; // override next element (should be a title or headline) margin to let overline be close to it.\n    }\n}\n\n\n/** Overwrite styling for editor */\nh1 {\n    @extend .mat-display-3 ;\n    letter-spacing: 0.65px;\n    font-family: 'Roboto Condensed' ;\n}\nh2 {\n    @extend .mat-headline ;\n}\nh3 {\n    @extend .mat-title ;\n}\nh4 {\n    @extend .mat-subheading-1 ;\n}\n// Paragraph in documents\np, ul, ol {\n    @extend .mat-body-1 ;\n    margin: 0.6rem 0 0 ;\n    font-family: Lora, serif;\n}\n\n// All bullet points under a list, no matter nested or not\nul, ol {\n    @extend .mat-body-1 ;\n    li {\n        margin: 0.6rem 0 0 ;\n    }\n    ul, ol {\n        margin: 0;\n    }\n}\n\nh1, h2, h3, h4,\n {\n    &:first-child {\n        margin: 0;\n    }\n}","// Import all the theming functionality.\n// We can use relative imports for imports from the cdk because we bundle everything\n// up into a single flat scss file for material.\n// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$cdk-z-index-overlay-container: 1000;\n$cdk-z-index-overlay: 1000;\n$cdk-z-index-overlay-backdrop: 1000;\n\n// Background color for all of the backdrops\n$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.32);\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n\n@mixin cdk-overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $cdk-z-index-overlay-container;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $cdk-z-index-overlay;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $cdk-z-index-overlay-backdrop;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // In high contrast mode the rgba background will become solid so we need to fall back\n      // to making it opaque using `opacity`. Note that we can't use the `cdk-high-contrast`\n      // mixin, because we can't normalize the import path to the _a11y.scss both for the\n      // source and when this file is distributed. See #10908.\n      @media screen and (-ms-high-contrast: active) {\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $cdk-overlay-dark-backdrop-background;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &, &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n    }\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n\n@mixin cdk-a11y {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n}\n\n/**\n * Applies styles for users in high contrast mode. Note that this only applies\n * to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n * attribute, however Chrome handles high contrast differently.\n * @param target Which kind of high contrast setting to target. Defaults to `active`, can be\n *    `white-on-black` or `black-on-white`.\n */\n@mixin cdk-high-contrast($target: active) {\n  @media screen and (-ms-high-contrast: $target) {\n    @content;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin cdk-text-field {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    animation-name: cdk-text-field-autofill-start;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    animation-name: cdk-text-field-autofill-end;\n  }\n\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    height: auto !important;\n    overflow: hidden !important;\n    // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n    // measurement. We just have to account for it later and subtract it off the final result.\n    padding: 2px 0 !important;\n    box-sizing: content-box !important;\n  }\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$cdk-text-field-autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin cdk-text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation-name: cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count};\n    animation-fill-mode: both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    animation-name: cdk-text-field-autofill-start,\n                    cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count};\n  }\n\n  $cdk-text-field-autofill-color-frame-count:\n      $cdk-text-field-autofill-color-frame-count + 1 !global;\n}\n\n\n// Core styles that can be used to apply material design treatments to any element.\n// Media queries\n// TODO(josephperrott): Change $mat-xsmall and $mat-small usages to rely on BreakpointObserver,\n$mat-xsmall: 'max-width: 599px';\n$mat-small: 'max-width: 959px';\n\n// TODO: Revisit all z-indices before beta\n// z-index master list\n\n$z-index-fab: 20 !default;\n$z-index-drawer: 100 !default;\n\n// Global constants\n$pi: 3.14159265;\n\n// Padding between input toggles and their labels\n$mat-toggle-padding: 8px !default;\n// Width and height of input toggles\n$mat-toggle-size: 20px !default;\n\n// Easing Curves\n// TODO(jelbourn): all of these need to be revisited\n\n// The default animation curves used by material design.\n$mat-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;\n$mat-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$mat-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n\n$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;\n\n$swift-ease-out-duration: 400ms !default;\n$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;\n\n$swift-ease-in-duration: 300ms !default;\n$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;\n$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;\n\n$swift-ease-in-out-duration: 500ms !default;\n$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;\n$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;\n\n$swift-linear-duration: 80ms !default;\n$swift-linear-timing-function: linear !default;\n$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;\n\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  @return (\n    0: '0px 0px 0px 0px #{rgba($color, $opacity * 0.2)}',\n    1: '0px 2px 1px -1px #{rgba($color, $opacity * 0.2)}',\n    2: '0px 3px 1px -2px #{rgba($color, $opacity * 0.2)}',\n    3: '0px 3px 3px -2px #{rgba($color, $opacity * 0.2)}',\n    4: '0px 2px 4px -1px #{rgba($color, $opacity * 0.2)}',\n    5: '0px 3px 5px -1px #{rgba($color, $opacity * 0.2)}',\n    6: '0px 3px 5px -1px #{rgba($color, $opacity * 0.2)}',\n    7: '0px 4px 5px -2px #{rgba($color, $opacity * 0.2)}',\n    8: '0px 5px 5px -3px #{rgba($color, $opacity * 0.2)}',\n    9: '0px 5px 6px -3px #{rgba($color, $opacity * 0.2)}',\n    10: '0px 6px 6px -3px #{rgba($color, $opacity * 0.2)}',\n    11: '0px 6px 7px -4px #{rgba($color, $opacity * 0.2)}',\n    12: '0px 7px 8px -4px #{rgba($color, $opacity * 0.2)}',\n    13: '0px 7px 8px -4px #{rgba($color, $opacity * 0.2)}',\n    14: '0px 7px 9px -4px #{rgba($color, $opacity * 0.2)}',\n    15: '0px 8px 9px -5px #{rgba($color, $opacity * 0.2)}',\n    16: '0px 8px 10px -5px #{rgba($color, $opacity * 0.2)}',\n    17: '0px 8px 11px -5px #{rgba($color, $opacity * 0.2)}',\n    18: '0px 9px 11px -5px #{rgba($color, $opacity * 0.2)}',\n    19: '0px 9px 12px -6px #{rgba($color, $opacity * 0.2)}',\n    20: '0px 10px 13px -6px #{rgba($color, $opacity * 0.2)}',\n    21: '0px 10px 13px -6px #{rgba($color, $opacity * 0.2)}',\n    22: '0px 10px 14px -6px #{rgba($color, $opacity * 0.2)}',\n    23: '0px 11px 14px -7px #{rgba($color, $opacity * 0.2)}',\n    24: '0px 11px 15px -7px #{rgba($color, $opacity * 0.2)}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  @return (\n    0: '0px 0px 0px 0px #{rgba($color, $opacity * 0.14)}',\n    1: '0px 1px 1px 0px #{rgba($color, $opacity * 0.14)}',\n    2: '0px 2px 2px 0px #{rgba($color, $opacity * 0.14)}',\n    3: '0px 3px 4px 0px #{rgba($color, $opacity * 0.14)}',\n    4: '0px 4px 5px 0px #{rgba($color, $opacity * 0.14)}',\n    5: '0px 5px 8px 0px #{rgba($color, $opacity * 0.14)}',\n    6: '0px 6px 10px 0px #{rgba($color, $opacity * 0.14)}',\n    7: '0px 7px 10px 1px #{rgba($color, $opacity * 0.14)}',\n    8: '0px 8px 10px 1px #{rgba($color, $opacity * 0.14)}',\n    9: '0px 9px 12px 1px #{rgba($color, $opacity * 0.14)}',\n    10: '0px 10px 14px 1px #{rgba($color, $opacity * 0.14)}',\n    11: '0px 11px 15px 1px #{rgba($color, $opacity * 0.14)}',\n    12: '0px 12px 17px 2px #{rgba($color, $opacity * 0.14)}',\n    13: '0px 13px 19px 2px #{rgba($color, $opacity * 0.14)}',\n    14: '0px 14px 21px 2px #{rgba($color, $opacity * 0.14)}',\n    15: '0px 15px 22px 2px #{rgba($color, $opacity * 0.14)}',\n    16: '0px 16px 24px 2px #{rgba($color, $opacity * 0.14)}',\n    17: '0px 17px 26px 2px #{rgba($color, $opacity * 0.14)}',\n    18: '0px 18px 28px 2px #{rgba($color, $opacity * 0.14)}',\n    19: '0px 19px 29px 2px #{rgba($color, $opacity * 0.14)}',\n    20: '0px 20px 31px 3px #{rgba($color, $opacity * 0.14)}',\n    21: '0px 21px 33px 3px #{rgba($color, $opacity * 0.14)}',\n    22: '0px 22px 35px 3px #{rgba($color, $opacity * 0.14)}',\n    23: '0px 23px 36px 3px #{rgba($color, $opacity * 0.14)}',\n    24: '0px 24px 38px 3px #{rgba($color, $opacity * 0.14)}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  @return (\n    0: '0px 0px 0px 0px #{rgba($color, $opacity * 0.12)}',\n    1: '0px 1px 3px 0px #{rgba($color, $opacity * 0.12)}',\n    2: '0px 1px 5px 0px #{rgba($color, $opacity * 0.12)}',\n    3: '0px 1px 8px 0px #{rgba($color, $opacity * 0.12)}',\n    4: '0px 1px 10px 0px #{rgba($color, $opacity * 0.12)}',\n    5: '0px 1px 14px 0px #{rgba($color, $opacity * 0.12)}',\n    6: '0px 1px 18px 0px #{rgba($color, $opacity * 0.12)}',\n    7: '0px 2px 16px 1px #{rgba($color, $opacity * 0.12)}',\n    8: '0px 3px 14px 2px #{rgba($color, $opacity * 0.12)}',\n    9: '0px 3px 16px 2px #{rgba($color, $opacity * 0.12)}',\n    10: '0px 4px 18px 3px #{rgba($color, $opacity * 0.12)}',\n    11: '0px 4px 20px 3px #{rgba($color, $opacity * 0.12)}',\n    12: '0px 5px 22px 4px #{rgba($color, $opacity * 0.12)}',\n    13: '0px 5px 24px 4px #{rgba($color, $opacity * 0.12)}',\n    14: '0px 5px 26px 4px #{rgba($color, $opacity * 0.12)}',\n    15: '0px 6px 28px 5px #{rgba($color, $opacity * 0.12)}',\n    16: '0px 6px 30px 5px #{rgba($color, $opacity * 0.12)}',\n    17: '0px 6px 32px 5px #{rgba($color, $opacity * 0.12)}',\n    18: '0px 7px 34px 6px #{rgba($color, $opacity * 0.12)}',\n    19: '0px 7px 36px 6px #{rgba($color, $opacity * 0.12)}',\n    20: '0px 8px 38px 7px #{rgba($color, $opacity * 0.12)}',\n    21: '0px 8px 40px 7px #{rgba($color, $opacity * 0.12)}',\n    22: '0px 8px 42px 7px #{rgba($color, $opacity * 0.12)}',\n    23: '0px 9px 44px 8px #{rgba($color, $opacity * 0.12)}',\n    24: '0px 9px 46px 8px #{rgba($color, $opacity * 0.12)}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$mat-elevation-transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$mat-elevation-transition-timing-function: $mat-fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$mat-elevation-color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$mat-elevation-opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$_mat-elevation-prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin mat-elevation($zValue, $color: $mat-elevation-color, $opacity: $mat-elevation-opacity) {\n  @if type-of($zValue) != number or not unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map-get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map-get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map-get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n@mixin _mat-theme-elevation($zValue, $theme, $opacity: $mat-elevation-opacity) {\n  $foreground: map-get($theme, foreground);\n  $elevation-color: map-get($foreground, elevation);\n  $elevation-color-or-default: if($elevation-color == null, $mat-elevation-color, $elevation-color);\n\n  @include mat-elevation($zValue, $elevation-color-or-default, $opacity);\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin mat-overridable-elevation(\n    $zValue,\n    $color: $mat-elevation-color,\n    $opacity: $mat-elevation-opacity) {\n  &:not([class*='#{$_mat-elevation-prefix}']) {\n    @include mat-elevation($zValue, $color, $opacity);\n  }\n}\n\n@mixin _mat-theme-overridable-elevation($zValue, $theme, $opacity: $mat-elevation-opacity) {\n  $foreground: map-get($theme, foreground);\n  $elevation-color: map-get($foreground, elevation);\n  $elevation-color-or-default: if($elevation-color == null, $mat-elevation-color, $elevation-color);\n\n  @include mat-overridable-elevation($zValue, $elevation-color-or-default, $opacity);\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function mat-elevation-transition-property-value(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin mat-elevation-transition(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  transition: mat-elevation-transition-property-value($duration, $easing);\n}\n\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$mat-red: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-pink: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-purple: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-deep-purple: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-indigo: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-blue: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-light-blue: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-cyan: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-teal: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-green: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-light-green: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-lime: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-yellow: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-amber: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-orange: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$mat-deep-orange: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-brown: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-grey: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$mat-gray: $mat-grey;\n\n$mat-blue-grey: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$mat-blue-gray: $mat-blue-grey;\n\n\n// Background palette for light themes.\n$mat-light-theme-background: (\n  status-bar: map_get($mat-grey, 300),\n  app-bar:    map_get($mat-grey, 100),\n  background: map_get($mat-grey, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map_get($mat-grey, 300),\n  selected-disabled-button: map_get($mat-grey, 400),\n  disabled-button-toggle: map_get($mat-grey, 200),\n  unselected-chip: map_get($mat-grey, 300),\n  disabled-list-option: map_get($mat-grey, 200),\n);\n\n// Background palette for dark themes.\n$mat-dark-theme-background: (\n  status-bar: black,\n  app-bar:    map_get($mat-grey, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map_get($mat-grey, 800),\n  dialog:     map_get($mat-grey, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map-get($mat-grey, 800),\n  focused-button: $light-focused,\n  selected-button: map_get($mat-grey, 900),\n  selected-disabled-button: map_get($mat-grey, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map_get($mat-grey, 700),\n  disabled-list-option: black,\n);\n\n// Foreground palette for light themes.\n$mat-light-theme-foreground: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$mat-dark-theme-foreground: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n\n\n\n// For a given hue in a palette, return the contrast color from the map of contrast palettes.\n// @param $color-map\n// @param $hue\n@function mat-contrast($palette, $hue) {\n  @return map-get(map-get($palette, contrast), $hue);\n}\n\n\n// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms\n// of the Material Design hues.\n// @param $color-map\n// @param $primary\n// @param $lighter\n@function mat-palette($base-palette, $default: 500, $lighter: 100, $darker: 700) {\n  $result: map_merge($base-palette, (\n    default: map-get($base-palette, $default),\n    lighter: map-get($base-palette, $lighter),\n    darker: map-get($base-palette, $darker),\n\n    default-contrast: mat-contrast($base-palette, $default),\n    lighter-contrast: mat-contrast($base-palette, $lighter),\n    darker-contrast: mat-contrast($base-palette, $darker)\n  ));\n\n  // For each hue in the palette, add a \"-contrast\" color to the map.\n  @each $hue, $color in $base-palette {\n    $result: map_merge($result, (\n      '#{$hue}-contrast': mat-contrast($base-palette, $hue)\n    ));\n  }\n\n  @return $result;\n}\n\n\n// Gets a color from a theme palette (the output of mat-palette).\n// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured\n// hues (default, lighter, darker), or any of the aforementioned prefixed with \"-contrast\".\n//\n// @param $color-map The theme palette (output of mat-palette).\n// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will\n//     be treated as opacity.\n// @param $opacity The alpha channel value for the color.\n@function mat-color($palette, $hue: default, $opacity: null) {\n  // If hueKey is a number between zero and one, then it actually contains an\n  // opacity value, so recall this function with the default hue and that given opacity.\n  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {\n    @return mat-color($palette, default, $hue);\n  }\n\n  $color: map-get($palette, $hue);\n  $opacity: if($opacity == null, opacity($color), $opacity);\n\n  @return rgba($color, $opacity);\n}\n\n\n// Creates a container object for a light theme to be given to individual component theme mixins.\n@function mat-light-theme($primary, $accent, $warn: mat-palette($mat-red)) {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: $warn,\n    is-dark: false,\n    foreground: $mat-light-theme-foreground,\n    background: $mat-light-theme-background,\n  );\n}\n\n\n// Creates a container object for a dark theme to be given to individual component theme mixins.\n@function mat-dark-theme($primary, $accent, $warn: mat-palette($mat-red)) {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: $warn,\n    is-dark: true,\n    foreground: $mat-dark-theme-foreground,\n    background: $mat-dark-theme-background,\n  );\n}\n\n\n\n$mat-ripple-color-opacity: 0.1;\n\n@mixin mat-ripple() {\n\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk-high-contrast {\n      display: none;\n    }\n  }\n}\n\n/* Theme for the ripple elements.*/\n@mixin mat-ripple-theme($theme) {\n  $foreground: map_get($theme, foreground);\n  $foreground-base: map_get($foreground, base);\n\n  .mat-ripple-element {\n    background-color: rgba($foreground-base, $mat-ripple-color-opacity);\n  }\n}\n\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map-get(map-get($config, $level), $name);\n}\n\n// Gets the font size for a level inside a typography config.\n@function mat-font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n// Gets the line height for a level inside a typography config.\n@function mat-line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n// Gets the font weight for a level inside a typography config.\n@function mat-font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n// Gets the letter spacing for a level inside a typography config.\n@function mat-letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n// Gets the font-family from a typography config and removes the quotes around it.\n@function mat-font-family($config, $level: null) {\n  $font-family: map-get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  @return if($font-family == null, $font-family, unquote($font-family));\n}\n\n// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n// the individual properties if a value that isn't allowed in the shorthand is passed in.\n@mixin mat-typography-font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note\n    // that we need to use interpolation for `font-size/line-height` in order to prevent\n    // Sass from dividing the two values.\n    font: $font-weight #{$font-size}/#{$line-height} $font-family;\n  }\n}\n\n// Converts a typography level into CSS styles.\n@mixin mat-typography-level-to-styles($config, $level) {\n  $font-size: mat-font-size($config, $level);\n  $font-weight: mat-font-weight($config, $level);\n  $line-height: mat-line-height($config, $level);\n  $font-family: mat-font-family($config, $level);\n\n  @include mat-typography-font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: mat-letter-spacing($config, $level);\n}\n\n\n@mixin mat-option-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-option {\n    color: mat-color($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    &.mat-active {\n      background: mat-color($background, hover);\n      color: mat-color($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: mat-color($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($primary);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($accent);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($warn);\n  }\n}\n\n@mixin mat-option-typography($config) {\n  .mat-option {\n    font: {\n      family: mat-font-family($config, subheading-2);\n      size: mat-font-size($config, subheading-2);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-optgroup-theme($theme) {\n  $foreground: map-get($theme, foreground);\n\n  .mat-optgroup-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: mat-color($foreground, hint-text);\n  }\n}\n\n@mixin mat-optgroup-typography($config) {\n  .mat-optgroup-label {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n}\n\n\n\n@mixin mat-pseudo-checkbox-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: mat-color(map-get($theme, foreground), secondary-text);\n\n    &::after {\n      color: mat-color($background, background);\n    }\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($theme, accent));\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($theme, primary));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($theme, warn));\n  }\n\n  .mat-pseudo-checkbox-checked {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n\n\n// Represents a typography level from the Material design spec.\n@function mat-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: null) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n// Represents a collection of typography levels.\n// Defaults come from https://material.io/guidelines/style/typography.html\n@function mat-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     mat-typography-level(112px, 112px, 300),\n  $display-3:     mat-typography-level(56px, 56px, 400),\n  $display-2:     mat-typography-level(45px, 48px, 400),\n  $display-1:     mat-typography-level(34px, 40px, 400),\n  $headline:      mat-typography-level(24px, 32px, 400),\n  $title:         mat-typography-level(20px, 32px, 500),\n  $subheading-2:  mat-typography-level(16px, 28px, 400),\n  $subheading-1:  mat-typography-level(15px, 24px, 400),\n  $body-2:        mat-typography-level(14px, 24px, 500),\n  $body-1:        mat-typography-level(14px, 20px, 400),\n  $caption:       mat-typography-level(12px, 20px, 400),\n  $button:        mat-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         mat-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map-get($level, font-family) == null {\n      $new-level: map-merge($level, (font-family: $font-family));\n      $config: map-merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map-merge($config, (font-family: $font-family));\n}\n\n// Adds the base typography styles, based on a config.\n@mixin mat-base-typography($config, $selector: '.mat-typography') {\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include mat-typography-level-to-styles($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include mat-typography-level-to-styles($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include mat-typography-level-to-styles($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    @include mat-typography-font-shorthand(\n      mat-font-size($config, body-1) * 0.83,\n      mat-font-weight($config, body-1),\n      mat-line-height($config, body-1),\n      mat-font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    @include mat-typography-font-shorthand(\n      mat-font-size($config, body-1) * 0.67,\n      mat-font-weight($config, body-1),\n      mat-line-height($config, body-1),\n      mat-font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include mat-typography-level-to-styles($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include mat-typography-level-to-styles($config, caption);\n  }\n\n  // Note: The spec doesn't mention letter spacing. The value comes from\n  // eyeballing it until it looked exactly like the spec examples.\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include mat-typography-level-to-styles($config, display-4);\n    margin: 0 0 56px;\n    letter-spacing: -0.05em;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include mat-typography-level-to-styles($config, display-3);\n    margin: 0 0 64px;\n    letter-spacing: -0.02em;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include mat-typography-level-to-styles($config, display-2);\n    margin: 0 0 64px;\n    letter-spacing: -0.005em;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include mat-typography-level-to-styles($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n\n\n\n\n@mixin mat-autocomplete-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mat-autocomplete-panel {\n    @include _mat-theme-overridable-elevation(4, $theme);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: mat-color($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: mat-color($foreground, text);\n      }\n    }\n  }\n\n}\n\n@mixin mat-autocomplete-typography($config) { }\n\n// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n\n\n\n\n\n$mat-badge-font-size: 12px;\n$mat-badge-font-weight: 600;\n$mat-badge-default-size: 22px !default;\n$mat-badge-small-size: $mat-badge-default-size - 6;\n$mat-badge-large-size: $mat-badge-default-size + 6;\n\n// Mixin for building offset given different sizes\n@mixin _mat-badge-size($size) {\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n\n    @include cdk-high-contrast {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: -$size / 2;\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: -$size / 2;\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: -$size / 2;\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: -$size / 2;\n      }\n    }\n  }\n}\n\n@mixin mat-badge-theme($theme) {\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $primary: map-get($theme, primary);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-badge-content {\n    color: mat-color($primary, default-contrast);\n    background: mat-color($primary);\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: mat-color($accent);\n      color: mat-color($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: mat-color($warn, default-contrast);\n      background: mat-color($warn);\n    }\n  }\n\n  .mat-badge {\n    position: relative;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. We convert it into a solid\n      // color by taking the opacity from the rgba value and using the value to determine the\n      // percentage of the background to put into foreground when mixing the colors together.\n      $app-background: mat-color($background, 'background');\n      $badge-color: mat-color($foreground, disabled-button);\n      $badge-opacity: opacity($badge-color);\n      background: mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _mat-badge-size($mat-badge-small-size);\n  }\n  .mat-badge-medium {\n    @include _mat-badge-size($mat-badge-default-size);\n  }\n  .mat-badge-large {\n    @include _mat-badge-size($mat-badge-large-size);\n  }\n}\n\n@mixin mat-badge-typography($config) {\n  .mat-badge-content {\n    font-weight: $mat-badge-font-weight;\n    font-size: $mat-badge-font-size;\n    font-family: mat-font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    font-size: $mat-badge-font-size / 2;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $mat-badge-font-size * 2;\n  }\n}\n\n\n\n\n\n@mixin mat-bottom-sheet-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-bottom-sheet-container {\n    @include _mat-theme-elevation(16, $theme);\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-bottom-sheet-typography($config) {\n  .mat-bottom-sheet-container {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n\n\n\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _mat-button-focus-overlay-color($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: mat-color($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: mat-color($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: mat-color($warn);\n  }\n\n  &[disabled] .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n@mixin _mat-button-ripple-color($theme, $hue, $opacity: 0.1) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    background-color: mat-color($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    background-color: mat-color($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    background-color: mat-color($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _mat-button-theme-property($theme, $property, $hue) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: mat-color($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: mat-color($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: mat-color($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &[disabled] {\n    &[disabled] {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: mat-color($palette, disabled-button);\n    }\n  }\n}\n\n@mixin mat-button-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _mat-button-theme-property($theme, 'color', default);\n    @include _mat-button-focus-overlay-color($theme);\n\n    // Setup the ripple color to be based on the color palette. The opacity can be a bit weaker\n    // than for icon-buttons, because normal and stroked buttons have a focus overlay.\n    @include _mat-button-ripple-color($theme, default);\n  }\n\n  .mat-button-focus-overlay {\n    background: map_get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not([disabled]) {\n    border-color: mat-color($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: mat-color($foreground, text);\n    background-color: mat-color($background, raised-button);\n\n    @include _mat-button-theme-property($theme, 'color', default-contrast);\n    @include _mat-button-theme-property($theme, 'background-color', default);\n    @include _mat-button-ripple-color($theme, default-contrast);\n  }\n\n  // Since icon buttons don't have a focus overlay, the ripple opacity should be the higher\n  // than the default value.\n  .mat-icon-button {\n    @include _mat-button-ripple-color($theme, default, 0.2);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include _mat-theme-overridable-elevation(0, $theme);\n  }\n\n  .mat-raised-button {\n    @include _mat-theme-overridable-elevation(2, $theme);\n\n    &:not([disabled]):active {\n      @include _mat-theme-overridable-elevation(8, $theme);\n    }\n\n    &[disabled] {\n      @include _mat-theme-overridable-elevation(0, $theme);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include _mat-theme-overridable-elevation(6, $theme);\n\n    &:not([disabled]):active {\n      @include _mat-theme-overridable-elevation(12, $theme);\n    }\n\n    &[disabled] {\n      @include _mat-theme-overridable-elevation(0, $theme);\n    }\n  }\n}\n\n@mixin mat-button-typography($config) {\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: mat-font-family($config, button);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-button-toggle-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n  $divider-color: mat-color($foreground, divider);\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include _mat-theme-elevation(2, $theme);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    box-shadow: none;\n  }\n\n  .mat-button-toggle {\n    color: mat-color($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: mat-color($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: mat-color($foreground, text);\n    background: mat-color($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: mat-color($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: mat-color($background, selected-button);\n    color: mat-color($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: mat-color($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: mat-color($foreground, disabled-button);\n    background-color: mat-color($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: mat-color($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: mat-color($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin mat-button-toggle-typography($config) {\n  .mat-button-toggle {\n    font-family: mat-font-family($config);\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-card-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-card {\n    @include _mat-theme-overridable-elevation(1, $theme);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include _mat-theme-overridable-elevation(0, $theme);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: mat-color($foreground, secondary-text);\n  }\n}\n\n@mixin mat-card-typography($config) {\n  .mat-card {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: mat-font-size($config, headline);\n      weight: mat-font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: mat-font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n\n\n\n@mixin mat-checkbox-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: mat-color($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: mat-color(map-get($theme, foreground), secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n\n    @include cdk-high-contrast(black-on-white) {\n      // Having the one above be !important ends up overriding the browser's automatic\n      // color inversion so we need to re-invert it ourselves for black-on-white.\n      stroke: #000 !important;\n    }\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: mat-color($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: mat-color($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: mat-color($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked:not(.mat-checkbox-indeterminate) {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: $disabled-color;\n    }\n\n    @include cdk-high-contrast {\n      opacity: 0.5;\n    }\n  }\n\n  // This one is moved down here so it can target both\n  // the theme colors and the disabled state.\n  @include cdk-high-contrast {\n    .mat-checkbox-background {\n      // Needs to be removed because it hides the checkbox outline.\n      background: none;\n    }\n  }\n\n  .mat-checkbox:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-checkbox-ripple .mat-ripple-element {\n      background-color: mat-color($primary);\n    }\n\n    &.mat-accent .mat-checkbox-ripple .mat-ripple-element {\n      background-color: mat-color($accent);\n    }\n\n    &.mat-warn .mat-checkbox-ripple .mat-ripple-element {\n      background-color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-checkbox-typography($config) {\n  .mat-checkbox {\n    font-family: mat-font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: mat-line-height($config, body-2);\n  }\n}\n\n\n\n\n\n\n$mat-chip-remove-font-size: 18px;\n\n@mixin mat-chips-theme-color($color) {\n  @include mat-chips-color(mat-color($color, default-contrast), mat-color($color));\n}\n\n@mixin mat-chips-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n\n  .mat-chip-remove:hover {\n    opacity: 0.54;\n  }\n}\n\n@mixin mat-chips-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  $unselected-background: mat-color($background, unselected-chip);\n  $unselected-foreground: mat-color($foreground, text);\n\n\n  .mat-chip.mat-standard-chip {\n    @include mat-chips-color($unselected-foreground, $unselected-background);\n\n    &:focus {\n      @include _mat-theme-elevation(3, $theme);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n\n    &.mat-primary {\n      @include mat-chips-theme-color($primary);\n    }\n\n    &.mat-warn {\n      @include mat-chips-theme-color($warn);\n    }\n\n    &.mat-accent {\n      @include mat-chips-theme-color($accent);\n    }\n  }\n}\n\n@mixin mat-chips-typography($config) {\n  .mat-chip {\n    font-size: mat-font-size($config, body-2);\n    font-weight: mat-font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $mat-chip-remove-font-size;\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-table-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-table {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: mat-color($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-table-typography($config) {\n  .mat-table {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: mat-font-size($config, caption);\n    font-weight: mat-font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n\n\n\n\n$mat-datepicker-selected-today-box-shadow-width: 1px;\n$mat-datepicker-selected-fade-amount: 0.6;\n$mat-datepicker-today-fade-amount: 0.2;\n$mat-calendar-body-font-size: 13px !default;\n$mat-calendar-weekday-table-font-size: 11px !default;\n\n@mixin _mat-datepicker-color($palette) {\n  .mat-calendar-body-selected {\n    background-color: mat-color($palette);\n    color: mat-color($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    background-color: fade-out(mat-color($palette), $mat-datepicker-selected-fade-amount);\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $mat-datepicker-selected-today-box-shadow-width\n                mat-color($palette, default-contrast);\n  }\n}\n\n@mixin mat-datepicker-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mat-calendar-arrow {\n    border-top-color: mat-color($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: mat-color($foreground, icon);\n  }\n\n  .mat-calendar-table-header {\n    color: mat-color($foreground, hint-text);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: mat-color($foreground, divider);\n  }\n\n  .mat-calendar-body-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content {\n    color: mat-color($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected) {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected) {\n      background-color: mat-color($background, hover);\n    }\n  }\n\n  .mat-calendar-body-today:not(.mat-calendar-body-selected) {\n    // Note: though it's not text, the border is a hint about the fact that this is today's date,\n    // so we use the hint color.\n    border-color: mat-color($foreground, hint-text);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today:not(.mat-calendar-body-selected) {\n    border-color: fade-out(mat-color($foreground, hint-text), $mat-datepicker-today-fade-amount);\n  }\n\n  @include _mat-datepicker-color(map-get($theme, primary));\n\n  .mat-datepicker-content {\n    @include _mat-theme-elevation(4, $theme);\n    background-color: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    &.mat-accent {\n      @include _mat-datepicker-color(map-get($theme, accent));\n    }\n\n    &.mat-warn {\n      @include _mat-datepicker-color(map-get($theme, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include _mat-theme-elevation(0, $theme);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: mat-color(map-get($theme, primary));\n\n    &.mat-accent {\n      color: mat-color(map-get($theme, accent));\n    }\n\n    &.mat-warn {\n      color: mat-color(map-get($theme, warn));\n    }\n  }\n}\n\n@mixin mat-datepicker-typography($config) {\n  .mat-calendar {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $mat-calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $mat-calendar-weekday-table-font-size;\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-dialog-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-dialog-container {\n    @include _mat-theme-elevation(24, $theme);\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-dialog-typography($config) {\n  .mat-dialog-title {\n    @include mat-typography-level-to-styles($config, title);\n  }\n}\n\n\n\n\n\n\n@mixin mat-expansion-panel-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-expansion-panel {\n    @include _mat-theme-overridable-elevation(2, $theme);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header {\n    &:not([aria-disabled='true']) {\n      &.cdk-keyboard-focused,\n      &.cdk-program-focused,\n      &:hover {\n        background: mat-color($background, hover);\n      }\n    }\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: mat-color($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: mat-color($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin mat-expansion-panel-typography($config) {\n  .mat-expansion-panel-header {\n    font: {\n      family: mat-font-family($config, subheading-1);\n      size: mat-font-size($config, subheading-1);\n      weight: mat-font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n\n\n\n// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin mat-truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin mat-line-base($secondary-font-size) {\n  .mat-line {\n    @include mat-truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin mat-normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin mat-line-wrapper-base() {\n  @include mat-normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin mat-grid-list-theme($theme) { }\n\n@mixin mat-grid-list-typography($config) {\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include mat-line-base(mat-font-size($config, caption));\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin mat-icon-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: mat-color($primary);\n    }\n\n    &.mat-accent {\n      color: mat-color($accent);\n    }\n\n    &.mat-warn {\n      color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-icon-typography($config) { }\n\n\n\n\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin mat-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function _mat-control-placeholder-color($theme) {\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n  @return mat-color($foreground, secondary-text, if($is-dark-theme, 0.5, 0.42));\n}\n\n\n/* stylelint-disable material/no-prefixes */\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  -moz-user-select: $value;\n  -ms-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n/* stylelint-enable */\n\n\n\n@mixin mat-input-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $foreground: map-get($theme, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: mat-color($primary);\n\n    @include input-placeholder {\n      color: _mat-control-placeholder-color($theme);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map-get($theme, is-dark)) {\n      option {\n        color: $dark-primary-text;\n      }\n\n      option:disabled {\n        color: $dark-disabled-text;\n      }\n    }\n  }\n\n  .mat-accent .mat-input-element {\n    caret-color: mat-color($accent);\n  }\n\n  .mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: mat-color($warn);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: mat-color($warn);\n  }\n}\n\n@mixin mat-input-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: -$line-spacing * 1em;\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-list-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-list, .mat-nav-list, .mat-selection-list {\n    .mat-list-item {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-list-option {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-subheader {\n      color: mat-color($foreground, secondary-text);\n    }\n  }\n\n  .mat-list-item-disabled {\n    background-color: mat-color($background, disabled-list-option);\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item {\n    &:hover, &:focus {\n      background: mat-color($background, 'hover');\n    }\n  }\n}\n\n@mixin mat-list-typography($config) {\n  $font-family: mat-font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list, .mat-nav-list, .mat-selection-list {\n    .mat-list-item {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: mat-font-family($config, body-2);\n      font-size: mat-font-size($config, body-2);\n      font-weight: mat-font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list[dense], .mat-nav-list[dense], .mat-selection-list[dense] {\n    .mat-list-item {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: mat-font-size($config, caption);\n      font-weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-menu-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-menu-panel {\n    @include _mat-theme-overridable-elevation(4, $theme);\n    background: mat-color($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: mat-color($foreground, 'text');\n\n    &[disabled] {\n      &, &::after {\n        color: mat-color($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon:not([color]),\n  .mat-menu-item-submenu-trigger::after {\n    color: mat-color($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: mat-color($background, 'hover');\n    }\n  }\n}\n\n@mixin mat-menu-typography($config) {\n  .mat-menu-item {\n    font: {\n      family: mat-font-family($config, body-1);\n      size: mat-font-size($config, body-1);\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-paginator-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mat-paginator {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid mat-color($foreground, 'icon');\n    border-right: 2px solid mat-color($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid mat-color($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: mat-color($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin mat-paginator-typography($config) {\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: mat-font-family($config, caption);\n      size: mat-font-size($config, caption);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-progress-bar-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-progress-bar-background {\n    fill: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: mat-color($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-bar-typography($config) { }\n\n\n\n\n\n\n@mixin mat-progress-spinner-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: mat-color($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: mat-color($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-spinner-typography($config) { }\n\n\n\n\n\n@mixin _mat-radio-color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: mat-color($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: mat-color($palette);\n  }\n}\n\n@mixin mat-radio-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _mat-radio-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-radio-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-radio-color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: mat-color($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: mat-color($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: mat-color($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map_get($foreground, base);\n    }\n  }\n}\n\n@mixin mat-radio-typography($config) {\n  .mat-radio-button {\n    font-family: mat-font-family($config);\n  }\n}\n\n\n\n\n\n\n\n\n@mixin mat-select-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-select-value {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: _mat-control-placeholder-color($theme);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: mat-color($background, card);\n    @include _mat-theme-overridable-elevation(4, $theme);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: mat-color($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: mat-color($primary);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: mat-color($accent);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: mat-color($warn);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: mat-color($warn);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin mat-select-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  .mat-select {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: $line-height * 1em;\n  }\n}\n\n\n\n\n\n\n@mixin mat-sidenav-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  // We use invert() here to have the darken the background color expected to be used. If the\n  // background is light, we use a dark backdrop. If the background is dark,\n  // we use a light backdrop.\n  $drawer-backdrop-color: invert(mat-color($background, card, 0.6));\n  $drawer-background-color: mat-color($background, dialog);\n  $drawer-container-background-color:  mat-color($background, background);\n  $drawer-push-background-color: mat-color($background, dialog);\n  $drawer-side-border: solid 1px mat-color($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: mat-color($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: mat-color($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include _mat-theme-elevation(16, $theme);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    background-color: $drawer-backdrop-color;\n  }\n}\n\n@mixin mat-sidenav-typography($config) { }\n\n\n\n\n\n\n@mixin _mat-slide-toggle-checked($palette, $thumb-checked-hue) {\n  // Do not apply the checked colors if the toggle is disabled, because the\n  // specificity would be to high for the disabled styles.\n  &.mat-checked:not(.mat-disabled) {\n    .mat-slide-toggle-thumb {\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: mat-color($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin mat-slide-toggle-theme($theme) {\n  $is-dark: map_get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we keep the old behavior that is based on the previous\n  // specifications. See: https://material.io/design/components/selection-controls.html#specs\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: if($is-dark, 200, default);\n  $thumb-disabled-hue: if($is-dark, 800, 400);\n\n  $bar-unchecked-color: mat-color($foreground, disabled);\n  $bar-disabled-color: if($is-dark, rgba(white, 0.12), rgba(black, 0.1));\n\n  $ripple-unchecked-color: mat-color($foreground, base);\n\n  .mat-slide-toggle {\n    @include _mat-slide-toggle-checked($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _mat-slide-toggle-checked($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _mat-slide-toggle-checked($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-disabled {\n    .mat-slide-toggle-thumb {\n      // The thumb of the slide-toggle always uses the hue 400 of the grey palette in dark\n      // or light themes. Since this is very specific to the slide-toggle component, we're not\n      // providing it in the background palette.\n      background-color: mat-color($mat-grey, $thumb-disabled-hue);\n    }\n    .mat-slide-toggle-bar {\n      background-color: $bar-disabled-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include _mat-theme-elevation(1, $theme);\n    background-color: mat-color($mat-grey, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin mat-slide-toggle-typography($config) {\n  .mat-slide-toggle-content {\n    font-family: mat-font-family($config);\n  }\n}\n\n\n\n\n\n@mixin _mat-slider-inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: mat-color($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: mat-color($palette, default-contrast);\n  }\n}\n\n@mixin mat-slider-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  $mat-slider-off-color: mat-color($foreground, slider-off);\n  $mat-slider-off-focused-color: mat-color($foreground, slider-off-active);\n  $mat-slider-disabled-color: mat-color($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color: mat-color($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color: mat-color($foreground, slider-off);\n  $mat-slider-focus-ring-color: mat-color($accent, default, 0.2);\n  $mat-slider-focus-ring-min-value-color: mat-color($foreground, base, 0.12);\n  $mat-slider-tick-color: mat-color($foreground, base, 0.7);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-primary {\n    @include _mat-slider-inner-content-theme($primary);\n  }\n\n  .mat-accent {\n    @include _mat-slider-inner-content-theme($accent);\n  }\n\n  .mat-warn {\n    @include _mat-slider-inner-content-theme($warn);\n  }\n\n  .mat-slider-focus-ring {\n    background-color: $mat-slider-focus-ring-color;\n  }\n\n  .mat-slider:hover,\n  .cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider-min-value {\n    .mat-slider-focus-ring {\n      background-color: $mat-slider-focus-ring-min-value-color;\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n  }\n}\n\n@mixin mat-slider-typography($config) {\n  .mat-slider-thumb-label-text {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, caption);\n      weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-stepper-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n  $primary: map-get($theme, primary);\n  $warn: map-get($theme, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover {\n      background-color: mat-color($background, hover);\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      color: mat-color($foreground, disabled-text);\n    }\n\n    .mat-step-icon {\n      background-color: mat-color($foreground, disabled-text);\n      color: mat-color($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: mat-color($primary);\n      color: mat-color($primary, default-contrast);\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: mat-color($warn);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: mat-color($warn);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: mat-color($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: mat-color($foreground, divider);\n  }\n\n  .mat-stepper-horizontal-line {\n    border-top-color: mat-color($foreground, divider);\n  }\n}\n\n@mixin mat-stepper-typography($config) {\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: mat-font-size($config, body-1);\n      weight: mat-font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: mat-font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: mat-font-size($config, body-2);\n      weight: mat-font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin mat-sort-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-sort-header-arrow {\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-trasparent color from the theme directly. We convert it into a solid\n    // color by taking the opacity from the rgba value and using the value to determine the\n    // percentage of the background to put into foreground when mixing the colors together.\n    $table-background: mat-color($background, 'card');\n    $text-color: mat-color($foreground, secondary-text);\n    $text-opacity: opacity($text-color);\n    color: mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n  }\n}\n\n@mixin mat-sort-typography($config) { }\n\n\n\n\n\n@mixin mat-tabs-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $header-border: 1px solid mat-color($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: mat-color($foreground, text);\n\n    &.mat-tab-disabled {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: mat-color($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: mat-color($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _mat-tab-label-focus($color);\n        @include _mat-ink-bar($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          @include _mat-ink-bar($color, default-contrast);\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _mat-tab-label-focus($color);\n        @include _mat-tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _mat-ink-bar($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: mat-color($color, $hue);\n  }\n}\n\n@mixin _mat-tab-label-focus($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: mat-color($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _mat-tabs-background($background-color) {\n  // Set background color for the tab group\n  .mat-tab-header, .mat-tab-links {\n    background-color: mat-color($background-color);\n  }\n\n  // Set labels to contrast against background\n  .mat-tab-label, .mat-tab-link {\n    color: mat-color($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: mat-color($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  .mat-tab-header-pagination-chevron {\n    border-color: mat-color($background-color, default-contrast);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: mat-color($background-color, default-contrast, 0.4);\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  .mat-ripple-element {\n    background-color: mat-color($background-color, default-contrast, 0.12);\n  }\n}\n\n@mixin mat-tabs-typography($config) {\n  .mat-tab-group {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: mat-font-family($config, button);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin _mat-toolbar-color($palette) {\n  background: mat-color($palette);\n  color: mat-color($palette, default-contrast);\n}\n\n@mixin _mat-toolbar-form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin mat-toolbar-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-toolbar {\n    background: mat-color($background, app-bar);\n    color: mat-color($foreground, text);\n\n    &.mat-primary {\n      @include _mat-toolbar-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-toolbar-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-toolbar-color($warn);\n    }\n\n    @include _mat-toolbar-form-field-overrides;\n  }\n}\n\n@mixin mat-toolbar-typography($config) {\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0;\n  }\n}\n\n\n\n\n\n$mat-tooltip-target-height: 22px;\n$mat-tooltip-font-size: 10px;\n$mat-tooltip-vertical-padding: ($mat-tooltip-target-height - $mat-tooltip-font-size) / 2;\n\n$mat-tooltip-handset-target-height: 30px;\n$mat-tooltip-handset-font-size: 14px;\n$mat-tooltip-handset-vertical-padding:\n    ($mat-tooltip-handset-target-height - $mat-tooltip-handset-font-size) / 2;\n\n@mixin mat-tooltip-theme($theme) {\n  .mat-tooltip {\n    background: mat-color($mat-grey, 700, 0.9);\n  }\n}\n\n@mixin mat-tooltip-typography($config) {\n  .mat-tooltip {\n    font-family: mat-font-family($config);\n    font-size: $mat-tooltip-font-size;\n    padding-top: $mat-tooltip-vertical-padding;\n    padding-bottom: $mat-tooltip-vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $mat-tooltip-handset-font-size;\n    padding-top: $mat-tooltip-handset-vertical-padding;\n    padding-bottom: $mat-tooltip-handset-vertical-padding;\n  }\n}\n\n\n\n\n\n@mixin mat-snack-bar-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $accent: map-get($theme, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, $dark-primary-text, $light-secondary-text);\n    background: if($is-dark-theme, map-get($mat-grey, 50), #323232);\n\n    @include _mat-theme-elevation(6, $theme);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, mat-color($accent));\n  }\n}\n\n@mixin mat-snack-bar-typography($config) {\n  .mat-simple-snackbar {\n    font: {\n      family: mat-font-family($config, body-1);\n      size: mat-font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin mat-form-field-fill-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  $fill-background: mat-color($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background: mat-color($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: mat-color($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-fill-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-fill-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-fill-dedupe;\n\n  $mat-form-field-fill-dedupe: $mat-form-field-fill-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-fill-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-fill-label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-fill-label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin mat-form-field-legacy-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  $label-color: mat-color($foreground, secondary-text);\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include mat-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-legacy-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $mat-form-field-legacy-dedupe);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  -ms-transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-legacy-dedupe)\n                  scale($font-scale);\n\n  width: 100% / $font-scale + $mat-form-field-legacy-dedupe;\n\n  $mat-form-field-legacy-dedupe: $mat-form-field-legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _mat-form-field-legacy-label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $mat-form-field-legacy-dedupe: $mat-form-field-legacy-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-legacy-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: 0.5em / $subscript-font-scale - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin mat-form-field-outline-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  $label-disabled-color: mat-color($foreground, disabled-text);\n  $outline-color: mat-color($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover: mat-color($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: mat-color($primary);\n  $outline-color-accent: mat-color($accent);\n  $outline-color-warn: mat-color($warn);\n  $outline-color-disabled: mat-color($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-outline-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-outline-dedupe)\n  scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-outline-dedupe;\n\n  $mat-form-field-outline-dedupe: $mat-form-field-outline-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-outline-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-outline-label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-outline-label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin mat-form-field-standard-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include mat-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin mat-form-field-standard-typography($config) {}\n\n\n\n// Theme styles that apply to all appearances of the form-field.\n\n@mixin mat-form-field-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color: mat-color($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: mat-color($primary);\n  $required-label-color: mat-color($accent);\n\n  // Underline colors.\n  $underline-color-base: mat-color($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: mat-color($accent);\n  $underline-color-warn: mat-color($warn);\n  $underline-focused-color: mat-color($primary);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include mat-form-field-legacy-theme($theme);\n  @include mat-form-field-standard-theme($theme);\n  @include mat-form-field-fill-theme($theme);\n  @include mat-form-field-outline-theme($theme);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-dedupe;\n\n  $mat-form-field-dedupe: $mat-form-field-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include mat-typography-level-to-styles($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: $line-height * 1em;\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _mat-form-field-label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _mat-form-field-label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n  }\n\n  @include mat-form-field-legacy-typography($config);\n  @include mat-form-field-standard-typography($config);\n  @include mat-form-field-fill-typography($config);\n  @include mat-form-field-outline-typography($config);\n}\n\n\n\n\n\n@mixin mat-tree-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-tree {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-tree-typography($config) {\n  .mat-tree {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: mat-font-weight($config, body-1);\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n// Includes all of the typographic styles.\n@mixin angular-material-typography($config: null) {\n  @if $config == null {\n    $config: mat-typography-config();\n  }\n\n  @include mat-badge-typography($config);\n  @include mat-base-typography($config);\n  @include mat-autocomplete-typography($config);\n  @include mat-bottom-sheet-typography($config);\n  @include mat-button-typography($config);\n  @include mat-button-toggle-typography($config);\n  @include mat-card-typography($config);\n  @include mat-checkbox-typography($config);\n  @include mat-chips-typography($config);\n  @include mat-table-typography($config);\n  @include mat-datepicker-typography($config);\n  @include mat-dialog-typography($config);\n  @include mat-expansion-panel-typography($config);\n  @include mat-form-field-typography($config);\n  @include mat-grid-list-typography($config);\n  @include mat-icon-typography($config);\n  @include mat-input-typography($config);\n  @include mat-menu-typography($config);\n  @include mat-paginator-typography($config);\n  @include mat-progress-bar-typography($config);\n  @include mat-progress-spinner-typography($config);\n  @include mat-radio-typography($config);\n  @include mat-select-typography($config);\n  @include mat-sidenav-typography($config);\n  @include mat-slide-toggle-typography($config);\n  @include mat-slider-typography($config);\n  @include mat-stepper-typography($config);\n  @include mat-sort-typography($config);\n  @include mat-tabs-typography($config);\n  @include mat-toolbar-typography($config);\n  @include mat-tooltip-typography($config);\n  @include mat-list-typography($config);\n  @include mat-option-typography($config);\n  @include mat-optgroup-typography($config);\n  @include mat-snack-bar-typography($config);\n  @include mat-tree-typography($config);\n}\n\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin mat-core($typography-config: null) {\n  @include angular-material-typography($typography-config);\n  @include mat-ripple();\n  @include cdk-a11y();\n  @include cdk-overlay();\n  @include cdk-text-field();\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin mat-core-theme($theme) {\n  @include mat-ripple-theme($theme);\n  @include mat-option-theme($theme);\n  @include mat-optgroup-theme($theme);\n  @include mat-pseudo-checkbox-theme($theme);\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{$_mat-elevation-prefix}#{$zValue} {\n      @include _mat-theme-elevation($zValue, $theme);\n    }\n  }\n\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map-get($theme, background);\n    $foreground: map-get($theme, foreground);\n\n    background-color: mat-color($background, background);\n    color: mat-color($foreground, text);\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@mixin mat-divider-theme($theme) {\n  $foreground: map-get($theme, foreground);\n\n  .mat-divider {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: mat-color($foreground, divider);\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Create a theme.\n@mixin angular-material-theme($theme) {\n  @include mat-core-theme($theme);\n  @include mat-autocomplete-theme($theme);\n  @include mat-badge-theme($theme);\n  @include mat-bottom-sheet-theme($theme);\n  @include mat-button-theme($theme);\n  @include mat-button-toggle-theme($theme);\n  @include mat-card-theme($theme);\n  @include mat-checkbox-theme($theme);\n  @include mat-chips-theme($theme);\n  @include mat-table-theme($theme);\n  @include mat-datepicker-theme($theme);\n  @include mat-dialog-theme($theme);\n  @include mat-divider-theme($theme);\n  @include mat-expansion-panel-theme($theme);\n  @include mat-form-field-theme($theme);\n  @include mat-grid-list-theme($theme);\n  @include mat-icon-theme($theme);\n  @include mat-input-theme($theme);\n  @include mat-list-theme($theme);\n  @include mat-menu-theme($theme);\n  @include mat-paginator-theme($theme);\n  @include mat-progress-bar-theme($theme);\n  @include mat-progress-spinner-theme($theme);\n  @include mat-radio-theme($theme);\n  @include mat-select-theme($theme);\n  @include mat-sidenav-theme($theme);\n  @include mat-slide-toggle-theme($theme);\n  @include mat-slider-theme($theme);\n  @include mat-stepper-theme($theme);\n  @include mat-sort-theme($theme);\n  @include mat-tabs-theme($theme);\n  @include mat-toolbar-theme($theme);\n  @include mat-tooltip-theme($theme);\n  @include mat-tree-theme($theme);\n  @include mat-snack-bar-theme($theme);\n}\n",null,"// Editor give a border or backgorund to show editable area boundary\n@mixin shaded-input-field-mixin($border-radius: 10px) {\n    outline: 0;\n    border-style: none;\n    // border-width: 3px;\n    // border-color: $primary-color;\n    // border-radius: $border-radius;\n    background-color: rgba($color: black, $alpha: 0.07);\n}\n.shaded-input-field[contentEditable][contentEditable=true], // for dov editable like doc title (just plain text), but not ckeditor\n.shaded-input-field .ck.ck-content.ck-editor__editable > *:not(figure), // for ckeditor like doc content, but only the text content instead of images.\n.shaded-input-field mat-chip-list .mat-chip-list-wrapper, // for doc tag chips (deprecated)\n.shaded-input-field input { // for doc tag input\n    &, &:focus, &:hover {\n        @include shaded-input-field-mixin();\n    }\n}\n\n// Remove mat-form-field input's underline. We're not overwriting all mat-input,\n// so please use class selector .input-field-no-underline when applying this style\nmat-form-field.mat-form-field.input-field-no-underline .mat-form-field-underline {\n    display: none;\n}\n\nmat-form-field.mat-form-field mat-chip-list {\n    &:focus {\n        outline: none;\n    }\n\n    mat-chip.mat-chip {\n        user-select: none;\n        box-shadow: none;\n    }\n}","/* You can add global styles to this file, and also import other style files */\n\n// Angular Material\n@import '~@angular/material/theming';\n@include mat-core(); // Be sure that you only ever include this mixin once!\n\n// Customized global styles\n@import \"./global-styles/mixins.scss\";\n@import \"./global-styles/typography.scss\";\n@import \"./global-styles/input-components.scss\";\n@import \"./global-styles/colors.scss\";\n@import \"./global-styles/responsive.scss\";\n@import \"./global-styles/effects.scss\";\n@import \"./global-styles/structures.scss\";\n\n// avoid unwanted spaces between body and Angular's app-root.\nbody {\n    margin: 0;\n}","/** \n*\n* Color Palette\n* https://material.io/tools/color\n*\n*/\n\n// Define the palettes for your theme using the Material Design palettes available in palette.scss\n// Usage: mat-palette(color, default, lighter-variant, darker-variant);\n$primary-color-starter:     mat-palette($mat-teal, 700);\n$accent-color-starter:      mat-palette($mat-orange, 100);\n$warn-color-starter:        mat-palette($mat-deep-orange);\n\n\n// Based on color palette generate theme\n$light-theme: mat-light-theme($primary-color-starter, $accent-color-starter, $warn-color-starter);\n$light-theme-primary-color-palette: map-get($map: $light-theme, $key: primary);\n$light-theme-accent-color-palette: map-get($map: $light-theme, $key: accent);\n$light-theme-warn-color-palette: map-get($map: $light-theme, $key: warn);\n$light-theme-foreground-color-palette:  map-get($light-theme, foreground);\n\n$dark-theme: mat-dark-theme($primary-color-starter, $accent-color-starter, $warn-color-starter);\n$dark-theme-foreground-color-palette:  map-get($dark-theme, foreground);\n\n.light-theme {\n    @include angular-material-theme($light-theme);\n}\n.dark-theme {\n    @include angular-material-theme($dark-theme);\n}\n\n// Default\n* {\n    @extend .light-theme ;\n}\n\n\n\n\n\n\n/*\n* \n* Globally usable color classes \n*\n*/\n\n// Custom Sass colors vars (will be available in all the project)\n$light-theme-primary-color: mat-color($light-theme-primary-color-palette);\n$light-theme-accent-color: mat-color($light-theme-accent-color-palette);\n$light-theme-warn-color: mat-color($light-theme-warn-color-palette);\n\n.fill-primary-color {\n    background-color: $light-theme-primary-color;\n}\n.fill-accent-color {\n    background-color: $light-theme-accent-color;\n}\n.fill-warn-color {\n    background-color: $light-theme-warn-color;\n}\n\n.dark-theme-text {\n    color: mat-color($dark-theme-foreground-color-palette, text);\n}\n.light-theme-text {\n    color: mat-color($light-theme-foreground-color-palette, text);\n}\n\n\n\n\n/*\n*\n* How to use theme in your own components\n* https://medium.com/@tomastrajan/the-complete-guide-to-angular-material-themes-4d165a9d24d1\n*\n*********************\n\n@import '~@angular/material/theming';\n\n$one-color-palette | $foreground-color-palette | $background-color-palette \n    : map-get($theme, primary | accent | warn | foreground | background);\n\nCSS-SELECTOR {\n    *-color: mat-color($one-color-palette, (optional) text | card | base | divider...);\n    *-color: mat-color($one-color-palette, lighter | lighter-contrast...);\n    *-color: mat-color($foreground-color-palette, text | disabled...);\n    *-color: mat-color($background-color-palette, hover | card...);\n}\n\n** You cannot use this in component's style sheet. \nYou have to create theme scss for that component, \nand import this component theme scss in global styles.scss **\n\n*********************/","/*\n* \n* Responsive Breakpoints\n* Usage: \n\n@import \"../../global-styles/responsive.scss\";\n$gt-sm: map-get($breakpoints, gt-sm);\n$lt-md: map-get($breakpoints, lt-md);\n\n@media  {\n\n}\n\n*/\n\n$breakpoints:(\n    xs: screen and (max-width: 599px),\n    sm: screen and (min-width: 600px) and (max-width: 959px),\n    md: screen and (min-width: 960px) and (max-width: 1279px),\n    lg: screen and (min-width: 1280px) and (max-width: 1919px),\n    xl: screen and (min-width: 1920px) and (max-width: 5000px),\n    lt-sm: screen and (max-width: 599px),\n    lt-md: screen and (max-width: 959px),\n    lt-lg: screen and (max-width: 1279px),\n    lt-xl: screen and (max-width: 1919px),\n    gt-xs: screen and (min-width: 600px), \n    gt-sm: screen and (min-width: 960px),\n    gt-md: screen and (min-width: 1280px),\n    gt-xl: screen and (min-width: 1920px),\n);\n\n.responsive-indicator {\n    &:after {\n        position: fixed;\n        bottom: 0px;\n        left: 0px;\n        padding: .8em 3em;\n        opacity: 0.9;\n        border-radius: .5em .5em 0 0;\n\n        background-color: gray;\n        color: white;\n        content: \"undefined\";\n\n        $keys: map-keys($breakpoints);\n        @for $i from length($keys) through 1 {\n            $device: nth($list: $keys, $n: $i);\n            $query-range: map-get($map: $breakpoints, $key: $device);\n            @media #{$query-range} {\n                background-color: rgba($i*20, 240 - $i*30, 255 - $i*15, 0.9);\n                content: \"#{$i} #{$device}\";\n            }\n        }\n    }\n}\n\n/**\n    Usage:\n\n    @import \"../../global-styles/responsive.scss\";\n\n    @include bp(gt-sm) {\n\n        YOUR CSS HERE\n\n    }\n*/\n@mixin bp($breakpoint) {\n    $keys: map-keys($breakpoints);\n    @for $i from length($keys) through 1 {\n        $device: nth($list: $keys, $n: $i);\n        $query-range: map-get($map: $breakpoints, $key: $device);\n\n        @if $breakpoint == $device {\n            @media #{$query-range} {\n                @content;\n            }\n        }\n    }\n}","/*\n*\n* Components\n*\n*/\n\n\n\n\n\n/* Page section */\n.page-section {\n    padding: 50px 20px;\n}\n.content-section {\n    margin: 0 20px 20px 20px;\n}\n\n\n\n\n\n\n/* Overlapped video background in home headline */\n.video-background-container {\n    position: relative;\n    min-height: 100vh;\n    color: FloralWhite ;\n    background-color: rgba($color: black, $alpha: 0.7);\n\n    .video-background {\n        position: absolute;\n        top: 0;\n        height: 100%;\n        width: 100%;\n        object-fit: cover;\n        z-index: -999;\n    }\n}\n\n\n\n\n\n\n/* Overlapped image background */\n// Usage: do not apply inline background color on container\n// set background image on div, and apply class .image-background on it\n// for its parent, set .image-background-container\n@mixin hammered-img-box($div-mode: false, $img-mode: false) {\n    position: absolute;\n    top: 0;\n    // bottom: 0;\n    left: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n\n    $position: 50% 50%;\n\n    @if $div-mode {\n        background-size: cover;\n        background-position: $position;   \n    }\n    @else if $img-mode {\n        object-fit: cover;\n        object-position: $position;\n    }\n}\n.image-background-container {\n    position: relative;\n    z-index: 1; // just give an arbitrary initial value so can overlay other layers on it.\n\n    div {\n        &.image-background {\n            @include hammered-img-box($div-mode: true);\n        }\n    }\n\n    img {\n        &.image-background {\n            @include hammered-img-box($img-mode: true);\n        }\n    }\n\n    div, img {\n        &.image-contain {\n            object-fit: contain;\n            background-size: contain;\n        }\n    }\n}\n\n\n\n\n\n\n/* Image that fits in a box */\n// currently only for About selfie\n$gt-sm: map-get($breakpoints, gt-sm);\n@media #{$gt-sm} {\n    .selfie-img {\n        background-size: cover;\n        background-position: 50% 50%;   \n        width: 100%;\n        height: 100%;\n    }\n}\n$lt-md: map-get($breakpoints, lt-md);\n@media #{$lt-md} {\n    .selfie-img {\n        // object-fit: cover;\n        // object-position: 10% 10%;   \n        background-size: cover;\n        background-position: 10% 10%;   \n        width: 100%;\n        height: 50vh;\n    }\n}","/*\n*\n* CSS Animation\n* https://www.w3schools.com/css/css3_animations.asp\n*\n*/\n\n.fade-out {\n    animation-name: fade-out-keyframes;\n    animation-duration: 0.15s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n    animation-timing-function: ease-in-out;\n}\n\n.fade-in {\n    animation-name: fade-in-keyframes;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n    animation-timing-function: ease-in-out;\n}\n\n@keyframes fade-out-keyframes {\n    0% {\n        opacity: 1;\n    }\n\n    100% {\n        opacity: 0;\n    }\n}\n\n@keyframes fade-in-keyframes {\n    0% {\n        opacity: 0;\n    }\n\n    100% {\n        opacity: 1;\n    }\n}\n\n// animation for loading in image background\n.image-background {\n    transition: opacity 1s;\n    opacity: 0;\n    &.ng-lazyloaded {\n        opacity: 1;\n    }\n}\n\n\n\n\n\n// Shaded background\n// Usage: \n// <parent class=\"image-background-container shaded\" >\n//      <image-DOM class=\"image-background (scroll-with-page)\" \n//          (optional): lazyLoad=\"URL\" [style.background-position]=\"optional\" offset=\"optional\" (onLoad)=\"optional\" >\n\n.image-background-container.shaded {\n\n    @extend .dark-theme-text ;\n    \n    // (Required) let background image onload and shaded\n    .image-background {\n        z-index: -1; // push back image so other contents can overlay on it\n\n        // also has ng-lazyloading for use\n        &.ng-lazyloaded {\n            &::before{\n                @include pinned-box-mixin($no-background: true);\n                content: \" \";\n                background-color: rgba($color: black, $alpha: 0.6);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n// Shaded image background w/ high contrast text overlay; optional hover zoom-in effect\n/*\n<.themed-actions-container (optional).zoom-in-hover-effect >\n    <.image-background-container .themed-action-container>\n        <.image-background .themed-action>    \n        <.themed-action-text-container>  <----- for shaded effect\n            <.evenly-shadowed-text>\n*/\n\n.themed-actions-container {\n    // need to be lower than headline middle, \n    // in order to let their (headline middle) shadow take effect on this headline actions area.\n    // .image-background-container z-index is set to 1, so we need to be lower than that\n    z-index: 0; \n\n    // initial state & transition spec\n    .themed-action-container {\n        \n        .themed-action-text-container {\n            @include pinned-box-mixin();\n            background-color: rgba($color: black, $alpha: 0.7);\n        }\n    }\n}\n\n// hover effect: zoom in background image \n.themed-actions-container.zoom-in-hover-effect {\n\n    // initial state & transition spec\n    .themed-action-container {\n        overflow: hidden;\n\n        .themed-action-text-container {\n            // @include pinned-box-mixin();\n            \n            // background-color: rgba($color: black, $alpha: 0.7);\n            @include set-transition-promptly(background-color);\n        }\n\n        .image-background.themed-action {\n            @include set-transition-promptly(transform);\n        }\n    }\n    \n    .themed-action-container:hover {\n        cursor: pointer;\n\n        .themed-action-text-container {\n            background-color: rgba($color: black, $alpha: 0.2);\n        }\n\n        .image-background.themed-action {\n            transform: scale(1.2) translate3d(0,0,-1px);\n        }\n    }\n}\n\n// adjust text contrast\n.themed-action-text-container {\n    .evenly-shadowed-text {\n        text-shadow: 0 0 7px rgba(0,0,0, 0.6);\n        z-index: 2 // required by bottom actions (but not themed actions)\n    }\n}\n\n\n\n\n\n\n// Glass background\n// Usage:\n// <parent class=\"image-background-container glass-overlay\"\n//      <image-DOM class=\"image-background glass-overlay\">\n//      <other-image-DOM class=\"image-background (glass-overlay)\">\n//      <content class=\"glass-overlay-content\">\n// Caution:\n// don't use any margin/padding on .image-background-container\n.image-background-container.glass-overlay {\n    overflow: hidden; // warning: polluting global styles\n    .image-background.glass-overlay {\n        overflow: hidden;\n        background-color: white;\n        transform: scale(2) translate3d(0,0,-1px); // trnaslate3d turns on hardware acceleration\n        backface-visibility: hidden; // avoid glitches when setting 3d z axis\n        filter: blur(20px) brightness(1) contrast(1) opacity(0.3);\n    }\n    .glass-overlay-content {\n        // give position relative, so it will have higher layer (z-index) \n        // than .image-background-container\n        // don't need to specify z-index because it's successive content after\n        // .image-background-container and will automatically be higher layer\n        position: relative;\n    }\n}\n\n\n\n\n/** \n*\n* Corner fixed-positioned control elements\n* \n* Using relative controls: make sure to set the parent with\n* .relative-corner-control-container, so that relative control is positioned correctly.\n*\n*/\n\n$horizontal-corners: left, right;\n$vertical-corners: top, bottom;\n@mixin page-button-control-base ($position) {\n    top: auto;\n    right: auto;\n    bottom: auto;\n    left: auto;\n    position: $position ;\n    z-index: 999;\n}\n\n@each $horizontal-corner in $horizontal-corners {\n    @each $vertical-corner in $vertical-corners {\n        .#{$horizontal-corner}-#{$vertical-corner}-control {\n            @include page-button-control-base(fixed);\n            #{$horizontal-corner}: 20px;\n            #{$vertical-corner}: 20px;\n        }\n    }\n}\n@each $horizontal-corner in $horizontal-corners {\n    @each $vertical-corner in $vertical-corners {\n        .relative-#{$horizontal-corner}-#{$vertical-corner}-control {\n            @include page-button-control-base(absolute);\n            #{$horizontal-corner}: 20px;\n            #{$vertical-corner}: 20px;\n        }\n    }\n}\n.relative-corner-control-container {\n    position: relative;\n}","/*****\n\nBasic Layout Shortcut\n\n*****/\n@mixin set-horizontal-margin($value) {\n    margin-left: $value ; \n    margin-right: $value ;\n}\n\n@mixin set-vertical-margin($value, $value-2: none) {\n    @if ($value-2 == \"none\") {\n        margin-top: $value ; \n        margin-bottom: $value ;\n    } @else {\n        margin-top: $value ; \n        margin-bottom: $value-2 ;\n    }\n}\n\n\n\n/***** \n\nBox Shadow\nsee more at ... see https://css-tricks.com/almanac/properties/b/box-shadow/ \n\n*****/\n@mixin box-shadow-mixin-multiple($arg-y-blur-color-list) {\n    $box-shadow-collection: '';\n    @for $i from 1 through length($arg-y-blur-color-list)/3 {\n        \n        $offset-y: nth($list: $arg-y-blur-color-list, $n: 3*$i - 2 );\n        $blur-radius: nth($list: $arg-y-blur-color-list, $n: 3*$i - 1);\n        $color: nth($list: $arg-y-blur-color-list, $n: 3*$i);\n\n        @if ($box-shadow-collection == '') {\n            $box-shadow-collection: box-shadow-function(0, $offset-y, $blur-radius, 0, $color);\n        } @else {\n            $box-shadow-collection: #{$box-shadow-collection}, box-shadow-function(0, $offset-y, $blur-radius, 0, $color);\n        }\n    }\n    box-shadow: $box-shadow-collection;\n}\n\n@mixin box-shadow-mixin(\n    $offset-x: 0, $offset-y: 0, $blur-radius: 0, $spread-radius: 0, $color: transparent, $inset: false) {\n    @if $inset {\n        box-shadow: inset $offset-x $offset-y $blur-radius $spread-radius $color;\n    } @else {\n        box-shadow: $offset-x $offset-y $blur-radius $spread-radius $color;\n    }\n}\n\n@function box-shadow-function(\n    $offset-x: 0, $offset-y: 0, $blur-radius: 0, $spread-radius: 0, $color: transparent, $inset: false) {\n    @if $inset {\n        @return inset $offset-x $offset-y $blur-radius $spread-radius $color;\n    } @else {\n        @return $offset-x $offset-y $blur-radius $spread-radius $color;\n    }\n}\n\n\n\n\n/*****\n\nOverlay Content\n\n*****/\n@mixin pinned-box-mixin($no-background: false) {\n\n    @if $no-background != true {\n        background: inherit;\n    }\n    \n    position: absolute;\n    // top: 0;\n    // left: 0;\n    // right: 0;\n    // bottom: 0;\n\n    height: 100%;\n    width: 100%;\n\n    overflow: hidden;\n}\n\n\n\n\n\n\n/*****\n\nTransition Shortcut\n\n*****/\n@mixin set-transition-promptly($css-properties, $duration: 0.4s) {\n    $transition-collection: '';\n\n    @each $css-property in $css-properties {\n        $transition-timing: $duration cubic-bezier(0.23, 1, 0.32, 1) 0s; // take a look at https://developers.google.com/web/fundamentals/design-and-ux/animations/choosing-the-right-easing\n\n        @if ($transition-collection == '') {\n            $transition-collection: #{$css-property} #{$transition-timing};\n        } @else {\n            $transition-collection: #{$transition-collection}, #{$css-property} #{$transition-timing};\n        }\n\n        @if ($css-property == 'transform') {\n            backface-visibility: hidden; // avoid glitches when setting 3d z axis for hardware acceleration; remember to add 'translate3d(0,0,-1px)' to CSS transform!\n        }\n    }\n\n    will-change: $css-properties; // helps some browsers do further optimization\n    transition: $transition-collection;\n}\n\n\n/*****\n\nHelpers\n\n*****/\n\n@mixin enable-hardware-accelerated-transform($transform-args: ''){\n    @if $transform-args == '' {\n        transform: translate3d(0,0,-1px); // trnaslate3d turns on hardware acceleration\n    }\n    @else {\n        transform: $transform-args, translate3d(0,0,-1px); // trnaslate3d turns on hardware acceleration\n    }\n    backface-visibility: hidden; // avoid glitches when setting 3d z axis\n}"],"sourceRoot":""}